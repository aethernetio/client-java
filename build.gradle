if (gradle.parent != null) {
    tasks.register("updateVersion") {
        doLast {
            var fVersion = new File(projectDir, "version");
            var v = fVersion.getText('UTF-8').toInteger();
            v++;
            fVersion.write(v.toString());
            rootProject.version '0.0.' + v
            subprojects {
                version rootProject.version
            }
        }
    }
    tasks.register("aetherPub") {
        dependsOn("updateVersion")
        dependsOn(":client:publish")
        dependsOn(":pointToPoint:publish")
        dependsOn(":cli:publish")
        dependsOn(":chat:publish")
    }
}

group 'io.aether'
version '0.0.' + (new File(projectDir, "version").getText('UTF-8'))
subprojects {
    group rootProject.group
    version rootProject.version
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://nexus.aethernet.io/maven/releases/'
            allowInsecureProtocol = true
        }
    }
    afterEvaluate {
        if (gradle.parent != null) {
            if (it.plugins.hasPlugin('maven-publish')) {
                publishing {
                    repositories {
                        maven {
                            def releasesUrl = uri("http://nexus.aethernet.io/maven/releases/")
                            def snapshotsUrl = uri("http://nexus.aethernet.io/maven/snapshots/")
                            if (version.toString().endsWith("SNAPSHOT")) {
                                url(snapshotsUrl)
                            } else {
                                url(releasesUrl)
                            }
                            allowInsecureProtocol = true

                            credentials {
                                username gradle.parent.rootProject.properties["aetherRepoUser"] as String
                                password gradle.parent.rootProject.properties["aetherRepoPassword"] as String
                            }
                        }
                    }
                }
            }
        }
        if (it.plugins.hasPlugin('java')) {
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(11)
                }
                withJavadocJar()
                withSourcesJar()
            }
            def isLib = it.plugins.hasPlugin('java-library')
            compileJava.options.encoding = "UTF-8"
            compileTestJava.options.encoding = "UTF-8"
            dependencies {
                if (isLib) {
                    api 'org.jetbrains:annotations:24.0.1'
                    api 'it.unimi.dsi:fastutil:8.5.12'
                } else {
                    implementation 'org.jetbrains:annotations:24.0.1'
                    implementation 'it.unimi.dsi:fastutil:8.5.12'
                }
                testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
                testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            }

            javadoc.options.addStringOption('Xdoclint:none', '-quiet')
            test {
                useJUnitPlatform()
                testLogging.showStandardStreams = true
                enableAssertions = true
            }
            compileTestJava {
                options.compilerArgs += ['-parameters']
            }
            compileJava {
                options.compilerArgs += ['-parameters',
                                         '-Xlint:unchecked',
                                         '-Xlint:deprecation'
                ]
            }
        }
    }

}
tasks.register('publishAllModules') {
    group = 'publishing'
    description = 'Publishes all modules that have maven-publish plugin applied'

    doFirst {
        println "🚀 STARTING PUBLICATION OF ALL MODULES"
        println "=" * 50

        // Собираем информацию о модулях для публикации
        def publishableModules = subprojects.findAll {
            it.plugins.hasPlugin('maven-publish')
        }

        if (publishableModules.empty) {
            println "❌ No modules with maven-publish plugin found"
            return
        }

        println "Found ${publishableModules.size()} publishable modules:"
        publishableModules.each { module ->
            def repoUrl = module.publishing.repositories.find {
                it.name == 'maven'
            }?.url?.toString() ?: 'unknown'
            println "  📦 ${module.path}"
            println "     Group: ${module.group}, Version: ${module.version}"
            println "     Repository: ${repoUrl}"
        }
        println ""
    }
}

tasks.register('checkPublishableModules') {
    group = 'publishing'
    description = 'Shows which modules will be published with publishAllModules'

    doLast {
        println "🔍 CHECKING PUBLISHABLE MODULES"
        println "=" * 50

        def publishableModules = subprojects.findAll {
            it.plugins.hasPlugin('maven-publish')
        }

        if (publishableModules.empty) {
            println "❌ No modules with maven-publish plugin found"
            return
        }

        println "The following ${publishableModules.size()} modules will be published:"
        publishableModules.each { module ->
            def hasJava = module.plugins.hasPlugin('java') || module.plugins.hasPlugin('java-library')
            def javaVersion = module.findProperty('sourceCompatibility') ?: 'unknown'

            println "  ✅ ${module.path}"
            println "     Coordinates: ${module.group}:${module.name}:${module.version}"
            println "     Type: ${hasJava ? 'Java Library' : 'Unknown'}"
            println "     Java: ${javaVersion}"

            // Проверяем настройки репозитория
            module.publishing.repositories.each { repo ->
                if (repo.name == 'maven') {
                    println "     Repository: ${repo.url}"
                }
            }
            println ""
        }

        println "💡 Run './gradlew publishAllModules' to publish all these modules"
    }
}

afterEvaluate {
    def publishTasks = []

    subprojects { subproject ->
        if (subproject.plugins.hasPlugin('maven-publish')) {
            def publishTask = subproject.tasks.findByName('publish')
            if (publishTask) {
                publishTasks.add(publishTask)
                println "✅ Added publish task for module: ${subproject.path}"
            }
        }
    }

    if (!publishTasks.empty) {
        tasks.named('publishAllModules') {
            dependsOn(publishTasks)
        }
        println "🎯 Configured publishAllModules to publish ${publishTasks.size()} modules"
    }
}